<?php

namespace App\Http\Controllers;
// Imports
use Illuminate\Http\Request;
// Model
use App\Models\User;
// JWT
use Tymon\JWTAuth\Facades\JWTAuth;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;
use Tymon\JWTAuth\Exceptions\JWTException;

class ChangePasswordController extends Controller
{
    public function index()
    {
        /** === Khai b√°o th∆∞ vi·ªán s·ª≠ d·ª•ng === */
        $dataversion = [
            'useslick' => 0,
            'useselect2' => 1,
        ];

        /** === X√¢y d·ª±ng SEO === */
        $domain = env('DOMAIN_WEB');
        $dataSeo = [
            'seo_title' => "ƒê·ªïi M·∫≠t Kh·∫©u T√†i Kho·∫£n - Fashion Houses",
            'seo_desc' => "B·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n t·∫°i Fashion Houses b·∫±ng c√°ch ƒë·ªïi m·∫≠t kh·∫©u an to√†n. C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n khi mua s·∫Øm tr·ª±c tuy·∫øn.",
            'seo_keyword' => "Fashion Houses ƒë·ªïi m·∫≠t kh·∫©u, c·∫≠p nh·∫≠t m·∫≠t kh·∫©u, b·∫£o m·∫≠t t√†i kho·∫£n, ƒë·ªïi m·∫≠t kh·∫©u an to√†n, t√†i kho·∫£n th·ªùi trang, b·∫£o v·ªá th√¥ng tin, b·∫£o m·∫≠t mua s·∫Øm tr·ª±c tuy·∫øn.",
            'canonical' => $domain . '/quan-ly-tai-khoan',
        ];

        /** === L·∫•y d·ªØ li·ªáu t√†i kho·∫£n === */
        $data = InForAccount();

        /** === L·∫•y d·ªØ li·ªáu danh m·ª•c theo t·ª´ng c·∫•p === */
        $categoryTree = getCategoryTree();

        /** === X√¢y d·ª±ng breadcrumb === */
        $breadcrumbItems = [
            ['title' => 'Trang ch·ªß', 'url' => '/', 'class' => 'otherssite'],
            [
                'title' => "Thay ƒë·ªïi m·∫≠t kh·∫©u",
                'url' => '',
                'class' => 'thissite'
            ]
        ];

        /** === Chu·∫©n b·ªã d·ªØ li·ªáu cho dataAll === */
        $dataAll = [
            'data' => $data,
            'Category' => $categoryTree,
            'breadcrumbItems' => $breadcrumbItems,
        ];

        /** === Tr·∫£ v·ªÅ view v·ªõi d·ªØ li·ªáu === */
        return view('change_password', [
            'dataSeo' => $dataSeo,
            'domain' => $domain,
            'dataversion' => $dataversion,
            'dataAll' => $dataAll,
        ]);
    }

    public function check_password_old(Request $request)
    {
        $data_mess = [
            'result' => false,
            'data' => '',
            'message' => "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n",
        ];
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            $emp_oldpassword = $request->get('emp_oldpassword');
            if (
                isset($user_id) && $user_id != "" &&
                isset($emp_oldpassword) && $emp_oldpassword != ""
            ) {
                $select = User::where([['use_id', $user_id], ['use_pass', md5($emp_oldpassword)]])->first();
                if (!empty($select)) {
                    return response()->json([
                        'result' => true,
                        'data' => 2,
                        'message' => "M·∫≠t kh·∫©u tr√πng kh·ªõp",
                    ], 200);
                } else {
                    return response()->json([
                        'result' => true,
                        'data' => 1,
                        'message' => "M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng",
                    ], 200);
                }
            }
            return response()->json($data_mess, 400);

        } catch (JWTException $e) {
            return response()->json(['message' => 'L·ªói x√°c th·ª±c token!'], 401);
        }
    }

    public function check_password_new(Request $request)
    {
        $data_mess = [
            'result' => false,
            'data' => '',
            'message' => "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n",
        ];
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            $emp_password = $request->get('emp_password');
            if (
                isset($user_id) && $user_id != "" &&
                isset($emp_password) && $emp_password != ""
            ) {
                $select = User::where([['use_id', $user_id], ['use_pass', md5($emp_password)]])->first();
                if (!empty($select)) {
                    return response()->json([
                        'result' => true,
                        'data' => 1,
                        'message' => "M·∫≠t kh·∫©u tr√πng kh·ªõp v·ªõi m·∫≠t kh·∫©u c≈©",
                    ], 200);
                } else {
                    return response()->json([
                        'result' => true,
                        'data' => 2,
                        'message' => "M·∫≠t kh·∫©u m·ªõi",
                    ], 200);
                }
            }
            return response()->json($data_mess, 400);

        } catch (JWTException $e) {
            return response()->json(['message' => 'L·ªói x√°c th·ª±c token!'], 401);
        }
    }

    public function ChangePassword(Request $request)
    {
        $data_mess = [
            'result' => false,
            'data' => '',
            'message' => "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n",
        ];
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            $emp_password = $request->get('emp_password');
            if (
                isset($user_id) && $user_id != "" &&
                isset($emp_password) && $emp_password != ""
            ) {
                $select = User::where('use_id', $user_id)->first();
                if (!empty($select)) {
                    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u t√†i kho·∫£n
                    $post = User::where('use_id', $user_id)->update([
                        'use_pass' => md5($emp_password),
                        'use_update_time' => time(),
                    ]);
                    return response()->json([
                        'result' => true,
                        'data' => $post,
                        'message' => "C·∫≠p nh·∫≠t m·∫≠t kh·∫©u th√†nh c√¥ng",
                    ], 200);
                } else {
                    return response()->json([
                        'result' => false,
                        'data' => '',
                        'message' => "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng",
                    ], 200);
                }
            }
            return response()->json($data_mess, 400);

        } catch (JWTException $e) {
            return response()->json(['message' => 'L·ªói x√°c th·ª±c token!'], 401);
        }
    }
}
