<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Cache;
// MODEL
use App\Models\comment;
use App\Models\comment_emoji;
use App\Models\comment_replie;
use App\Models\content_emojis;
use App\Models\User;
// JWT
use Tymon\JWTAuth\Facades\JWTAuth;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;
use Tymon\JWTAuth\Exceptions\JWTException;

class CommentController extends Controller
{

    // th·∫£ ·ªü tr√™n b√¨nh lu·∫≠n
    public function SubmitEmoji(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            $content_id = $request->get('data_id'); // ID s·∫£n ph·∫©m ho·∫∑c b√†i vi·∫øt
            $content_type = $request->get('data_type'); // 1: s·∫£n ph·∫©m, 2: b√†i vi·∫øt
            $dataemoji = $request->get('dataemoji'); // Emoji th·∫£

            if (empty($content_id) || empty($content_type) || empty($dataemoji)) {
                return apiResponse("error", "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n", [], false, 400);
            }

            DB::transaction(function () use ($content_id, $content_type, $dataemoji, $user_id) {
                content_emojis::updateOrCreate(
                    ['user_id' => $user_id, 'content_id' => $content_id, 'content_type' => $content_type],
                    ['emoji' => $dataemoji]
                );
            });

            return apiResponse("success", "Th·∫£ Emoji th√†nh c√¥ng", [], true, 200);

        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    // Lu·ªìng th·∫£ c·∫£m x√∫c ·ªü ph√≠a d∆∞·ªõi b√¨nh lu·∫≠n
    public function SubmitEmojiComment(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            // ===============L·∫•y d·ªØ li·ªáu t·ª´ font-end=======================
            $data_id = $request->get('data_id');
            $data_type = $request->get('data_type');
            $dataemoji = $request->get('dataemoji');

            if (!$data_id || !$data_type || !$dataemoji) {
                return apiResponse("error", "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n", [], false, 400);
            }

            // Ki·ªÉm tra xem ƒë√£ c√≥ b√¨nh lu·∫≠n ch∆∞a
            $comment = Comment::where('comment_user_id', $user_id)
                ->where('comment_content_id', $data_id)
                ->where('comment_type', $data_type)
                ->first();

            if (!$comment) {
                $comment = Comment::create([
                    'comment_user_id' => $user_id,
                    'comment_content_id' => $data_id,
                    'comment_type' => $data_type,
                    'comment_views' => 1,
                    'createdAt' => time(),
                    'updatedAt' => time(),
                ]);
            }

            DB::transaction(function () use ($comment, $user_id, $dataemoji) {
                $comment_id = $comment->comment_id;

                // Ki·ªÉm tra xem user ƒë√£ th·∫£ emoji n√†o ch∆∞a
                $comment_emoji = comment_emoji::where('emoji_comment_user', $user_id)
                    ->where('emoji_comment_id', $comment_id)
                    ->first();

                if ($comment_emoji) {
                    // N·∫øu user ƒë√£ th·∫£ emoji, c·∫≠p nh·∫≠t emoji m·ªõi
                    $comment_emoji->where('emoji_comment_id', $comment_id)->update([
                        'emoji_comment_type' => $dataemoji,
                        'emoji_comment_updateAt' => time(),
                    ]);
                } else {
                    // N·∫øu ch∆∞a c√≥, t·∫°o m·ªõi
                    comment_emoji::create([
                        'emoji_comment_user' => $user_id,
                        'emoji_comment_id' => $comment_id,
                        'emoji_comment_type' => $dataemoji,
                        'emoji_comment_createAt' => time(),
                        'emoji_comment_updateAt' => time(),
                    ]);
                }
            });

            return apiResponse("success", "Th·∫£ Emoji th√†nh c√¥ng", [], true, 200);

        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    // Lu·ªìng th√™m b√¨nh lu·∫≠n
    public function AddComment(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            // Nh·∫≠n d·ªØ li·ªáu t·ª´ request
            $data_id = $request->get('data_id');
            $data_type = $request->get('data_type'); // 1: s·∫£n ph·∫©m, 2: b√†i vi·∫øt
            $data_comment_text = $request->get('data_comment_text'); // N·ªôi dung b√¨nh lu·∫≠n
            $data_file = $request->file('data_file'); // File ·∫£nh (n·∫øu c√≥)
            $data_parents_id = $request->get('data_parents_id') ?? 0; // ID b√¨nh lu·∫≠n cha

            if (empty($data_id) || empty($data_type)) {
                return apiResponse("error", "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n", [], false, 400);
            }

            // X·ª≠ l√Ω upload file (n·∫øu c√≥)
            $imagePath = null;
            if ($data_file) {
                $originalName = $data_file->getClientOriginalName(); // "doodles-5654738.png"
                $extension = $data_file->getClientOriginalExtension(); // "png"
                $mimeType = $data_file->getClientMimeType(); // "image/png"
                $size = $data_file->getSize(); // Dung l∆∞·ª£ng file (bytes)
                $tempPath = $data_file->getPathname(); // "C:\xampp\tmp\php2F3F.tmp"
                $imagePath = UploadImageVideoComment($tempPath, $originalName, time(), $extension, 'product');
            }

            // ======= L∆∞u b√¨nh lu·∫≠n v√†o DB =======
            $comment = DB::transaction(function () use ($data_id, $data_type, $data_comment_text, $imagePath, $data_parents_id, $user_id) {
                return comment::create([
                    'comment_user_id' => $user_id,
                    'comment_parents_id' => $data_parents_id,
                    'comment_content_id' => $data_id,
                    'comment_type' => $data_type, //1:s·∫£n ph·∫©m, 2:b√†i vi·∫øt
                    'comment_content' => $data_comment_text,
                    'comment_share' => 0,
                    'comment_views' => 1,
                    'comment_image' => $imagePath,
                    'createdAt' => time(),
                    'updatedAt' => time(),
                ]);
            });
            $dataUser = User::where('use_id', $user_id)
                ->select([
                    'use_name',
                    'use_logo',
                    'use_create_time',
                ])
                ->first();

            if ($dataUser) {
                $dataUser->use_logo_full = !empty($dataUser->use_logo)
                    ? geturlimageAvatar($dataUser->use_create_time) . $dataUser->use_logo
                    : '';
            }

            return apiResponse("success", "B√¨nh lu·∫≠n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng", [
                'comment' => $comment,
                'user' => $dataUser,
            ], true, 200);


        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    // Lu·ªìng th√™m b√¨nh lu·∫≠n
    public function DeleteComment(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            // Nh·∫≠n d·ªØ li·ªáu t·ª´ request
            $comment_id = $request->get('comment_id', 0);

            if (!$comment_id) {
                return apiResponse("error", "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n", [], false, 400);
            }

            // T√¨m b√¨nh lu·∫≠n theo ID
            $comment = Comment::where('comment_id', $comment_id)->first();

            if (!$comment) {
                return apiResponse("error", "B√¨nh lu·∫≠n kh√¥ng t·ªìn t·∫°i", [], false, 404);
            }

            // Ki·ªÉm tra xem b√¨nh lu·∫≠n c√≥ thu·ªôc v·ªÅ user hay kh√¥ng
            if ($comment->user_id !== $user_id) {
                return apiResponse("error", "B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a b√¨nh lu·∫≠n n√†y", [], false, 403);
            }

            // X√≥a b√¨nh lu·∫≠n
            $comment->delete();

            return apiResponse("success", "X√≥a b√¨nh lu·∫≠n th√†nh c√¥ng", [], true, 200);

        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    // L·∫•y th√™m b√¨nh lu·∫≠n
    public function LoadMoreComment(Request $request)
    {
        try {
            // ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cookie & gi·∫£i m√£ =======
            $UID_ENCRYPT = $_COOKIE['UID'] ?? null;
            $UT_ENCRYPT = $_COOKIE['UT'] ?? null;
            $user_id = 0;
            if ($UID_ENCRYPT && $UT_ENCRYPT) {
                $key = base64_decode(getenv('KEY_ENCRYPT'));
                $user_id = decryptData($UID_ENCRYPT, $key);
            }

            /** === L·∫•y th√¥ng tin b√¨nh lu·∫≠n === */
            $product_id = $request->get('product_id');
            if (!$product_id) {
                return apiResponse("error", "Thi·∫øu product_id", [], false, 400);
            }

            $page = $request->get('page', 1);
            $limit = 10;
            $offset = ($page - 1) * $limit;

            $parentComments = comment::leftJoin('comment_replies as cr', 'comments.comment_id', '=', 'cr.comment_id')
                ->leftJoin('comment_emojis as ce', 'comments.comment_id', '=', 'ce.emoji_comment_id')
                ->leftJoin('users as us', 'comments.comment_user_id', '=', 'us.use_id')
                ->select(
                    // D·ªØ li·ªáu comment
                    'comments.comment_id',
                    'comments.comment_parents_id',
                    'comments.comment_user_id',
                    'comments.comment_content_id',
                    'comments.comment_type',
                    'comments.comment_content',
                    'comments.comment_share',
                    'comments.comment_views',
                    'comments.comment_image',
                    'comments.createdAt',
                    'comments.updatedAt',
                    // D·ªØ li·ªáu ng∆∞·ªùi d√πng
                    'us.use_name',
                    'us.use_logo',
                    'us.use_create_time',
                    // D·ªØ li·ªáu admin rep
                    'cr.reply_id',
                    'cr.admin_id',
                    'cr.content as reply_content',
                    'cr.comment_image as reply_image',
                    'cr.created_at as reply_createdAt',
                    'cr.updated_at as reply_updatedAt',
                    // D·ªØ li·ªáu emoji
                    'ce.emoji_id',
                    'ce.emoji_comment_user',
                    'ce.emoji_comment_type'
                )
                ->where('comments.comment_content_id', $product_id)
                ->where('comments.comment_parents_id', "=", 0)
                ->orderBy('comments.createdAt', 'desc')
                ->limit($limit)
                ->offset($offset)
                ->get();

            if (!$parentComments->isEmpty()) {
                $limitchild = 5;

                $parentIds = $parentComments->pluck('comment_id')->toArray();

                // L·∫•y danh s√°ch b√¨nh lu·∫≠n con
                $childComments = Comment::leftJoin('comment_replies as cr', 'comments.comment_id', '=', 'cr.comment_id')
                    ->leftJoin('comment_emojis as ce', 'comments.comment_id', '=', 'ce.emoji_comment_id')
                    ->leftJoin('users as us', 'comments.comment_user_id', '=', 'us.use_id')
                    ->select(
                        'comments.comment_id',
                        'comments.comment_parents_id',
                        'comments.comment_user_id',
                        'comments.comment_content_id',
                        'comments.comment_type',
                        'comments.comment_content',
                        'comments.comment_share',
                        'comments.comment_views',
                        'comments.comment_image',
                        'comments.createdAt',
                        'comments.updatedAt',
                        'us.use_name',
                        'us.use_logo',
                        'us.use_create_time',
                        'cr.reply_id',
                        'cr.admin_id',
                        'cr.content as reply_content',
                        'cr.comment_image as reply_image',
                        'cr.created_at as reply_createdAt',
                        'cr.updated_at as reply_updatedAt',
                        'ce.emoji_id',
                        'ce.emoji_comment_user',
                        'ce.emoji_comment_type'
                    )
                    ->whereIn('comments.comment_parents_id', $parentIds)
                    ->orderBy('comments.createdAt', 'desc')
                    ->get()
                    ->groupBy('comment_parents_id');

                // üî• Chuy·ªÉn danh s√°ch con th√†nh m·∫£ng
                $childComments = $childComments->map(function ($replies) use ($limitchild) {
                    return [
                        'data' => $replies->take($limitchild)->toArray(), // Gi·ªõi h·∫°n 5 b√¨nh lu·∫≠n con
                        'has_more' => $replies->count() > $limitchild // Ki·ªÉm tra xem c√≥ nhi·ªÅu h∆°n 5 b√¨nh lu·∫≠n kh√¥ng
                    ];
                })->toArray();

                // Chuy·ªÉn danh s√°ch cha th√†nh m·∫£ng
                $parentComments = $parentComments->toArray();

                // G·∫Øn b√¨nh lu·∫≠n con v√†o b√¨nh lu·∫≠n cha
                $parentComments = array_map(function ($parent) use ($childComments) {
                    $parentCommentId = $parent['comment_id'];

                    $parent['children'] = $childComments[$parentCommentId]['data'] ?? [];
                    $parent['has_more'] = $childComments[$parentCommentId]['has_more'] ?? false;

                    return $parent;
                }, $parentComments);
            }

            // D·ªØ li·ªáu tr·∫£ v·ªÅ
            return apiResponse("success", "L·∫•y danh s√°ch b√¨nh lu·∫≠n th√†nh c√¥ng", [
                'comments' => (!empty($parentComments)) ? $parentComments : [],
                'user_id' => $user_id,
            ]);
        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    //Load th√™m b√¨nh lu·∫≠n 
    public function LoadMoreReplies(Request $request)
    {
        try {
            // ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cookie & gi·∫£i m√£ =======
            $UID_ENCRYPT = $_COOKIE['UID'] ?? null;
            $UT_ENCRYPT = $_COOKIE['UT'] ?? null;
            $user_id = 0;
            if ($UID_ENCRYPT && $UT_ENCRYPT) {
                $key = base64_decode(getenv('KEY_ENCRYPT'));
                $user_id = decryptData($UID_ENCRYPT, $key);
            }
            // ======= END L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cookie & gi·∫£i m√£ =======
            $parentCommentId = $request->get('comment_id');
            $page = $request->get('page', 1);
            $limit = 5;
            $offset = ($page - 1) * $limit;

            if (!$parentCommentId) {
                return apiResponse("error", "Thi·∫øu ID b√¨nh lu·∫≠n", [], false, 400);
            }

            // L·∫•y danh s√°ch ph·∫£n h·ªìi con (gi·ªØ nguy√™n JOIN)
            $childComments = comment::leftJoin('comment_replies as cr', 'comments.comment_id', '=', 'cr.comment_id')
                ->leftJoin('comment_emojis as ce', 'comments.comment_id', '=', 'ce.emoji_comment_id')
                ->leftJoin('users as us', 'comments.comment_user_id', '=', 'us.use_id')
                ->select(
                    'comments.comment_id',
                    'comments.comment_parents_id',
                    'comments.comment_user_id',
                    'comments.comment_content_id',
                    'comments.comment_type',
                    'comments.comment_content',
                    'comments.comment_share',
                    'comments.comment_views',
                    'comments.comment_image',
                    'comments.createdAt',
                    'comments.updatedAt',
                    // D·ªØ li·ªáu ng∆∞·ªùi d√πng
                    'us.use_name',
                    'us.use_logo',
                    'us.use_create_time',
                    // D·ªØ li·ªáu admin rep
                    'cr.reply_id',
                    'cr.admin_id',
                    'cr.content as reply_content',
                    'cr.comment_image as reply_image',
                    'cr.created_at as reply_createdAt',
                    'cr.updated_at as reply_updatedAt',
                    // D·ªØ li·ªáu emoji
                    'ce.emoji_id',
                    'ce.emoji_comment_user',
                    'ce.emoji_comment_type'
                )
                ->where('comments.comment_parents_id', $parentCommentId)
                ->orderBy('comments.createdAt', 'desc')
                ->offset($offset)
                ->limit($limit)
                ->get();

            // Ki·ªÉm tra xem c√≤n ph·∫£n h·ªìi n·ªØa kh√¥ng
            $nextChildExists = comment::where('comment_parents_id', $parentCommentId)
                ->offset($offset + $limit)
                ->limit(1)
                ->exists();

            return apiResponse("success", "T·∫£i th√™m ph·∫£n h·ªìi th√†nh c√¥ng", [
                'comments' => $childComments,
                'has_more' => $nextChildExists,
                'user_id' => $user_id,
            ], true, 200);

        } catch (\Exception $e) {
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }
}
