<?php

namespace App\Http\Controllers;
use Illuminate\Http\Request;
use App\Models\User;
// JWT
use Tymon\JWTAuth\Facades\JWTAuth;
use Tymon\JWTAuth\Exceptions\TokenExpiredException;
use Tymon\JWTAuth\Exceptions\TokenInvalidException;
use Tymon\JWTAuth\Exceptions\JWTException;

class managerAccountController extends Controller
{
    public function index()
    {
        /** === Khai b√°o th∆∞ vi·ªán s·ª≠ d·ª•ng === */
        $dataversion = [
            'useslick' => 0,
            'useselect2' => 1,
        ];
        /** === X√¢y d·ª±ng SEO === */
        $domain = env('DOMAIN_WEB');
        $dataSeo = [
            'seo_title' => "Qu·∫£n L√Ω T√†i Kho·∫£n - Fashion Houses",
            'seo_desc' => "Qu·∫£n l√Ω th√¥ng tin c√° nh√¢n, theo d√µi ƒë∆°n h√†ng, c·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ giao h√†ng v√† b·∫£o m·∫≠t t√†i kho·∫£n c·ªßa b·∫°n t·∫°i Fashion Houses. Tr·∫£i nghi·ªám mua s·∫Øm th·ªùi trang d·ªÖ d√†ng v√† an to√†n!",
            'seo_keyword' => "Fashion Houses t√†i kho·∫£n, qu·∫£n l√Ω t√†i kho·∫£n, c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n, b·∫£o m·∫≠t t√†i kho·∫£n, theo d√µi ƒë∆°n h√†ng, ƒë·ªãa ch·ªâ giao h√†ng, l·ªãch s·ª≠ mua s·∫Øm, t√†i kho·∫£n kh√°ch h√†ng, th·ªùi trang tr·ª±c tuy·∫øn.",
            'canonical' => $domain . '/quan-ly-tai-khoan',
        ];
        /** === X√¢y d·ª±ng breadcrumb === */
        $breadcrumbItems = [
            ['title' => 'Trang ch·ªß', 'url' => '/', 'class' => 'otherssite'],
            [
                'title' => "Qu·∫£n l√Ω t√†i kho·∫£n",
                'url' => '',
                'class' => 'thissite'
            ]
        ];
        /** === Chu·∫©n b·ªã d·ªØ li·ªáu === */
        $data = InForAccount();
        // l·∫•y d·ªØ li·ªáu danh m·ª•c theo t·ª´ng c·∫•p
        $categoryTree = getCategoryTree();
        $dataAll = [
            'data' => $data,
            'breadcrumbItems' => $breadcrumbItems,
            'Category' => $categoryTree,
        ];
        /** === Tr·∫£ v·ªÅ view v·ªõi d·ªØ li·ªáu === */
        return view('manager_account', [
            'dataSeo' => $dataSeo,
            'domain' => $domain,
            'dataversion' => $dataversion,
            'dataAll' => $dataAll,
        ]);
    }

    public function AccountUpdate(Request $request)
    {
        $data_mess = [
            'result' => false,
            'data' => '',
            'message' => "Thi·∫øu d·ªØ li·ªáu truy·ªÅn l√™n",
        ];

        try {
            // üü¢ L·∫•y user t·ª´ request
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }

            // üü¢ Nh·∫≠n d·ªØ li·ªáu t·ª´ request
            $avatar = $request->file('avatar');
            $emp_email_contact = $request->get('emp_email_contact');
            $emp_name = $request->get('emp_name');
            $emp_address = $request->get('emp_address');
            $emp_phone = $request->get('emp_phone');
            $emp_birth = $request->get('emp_birth');
            $ip_address = client_ip();

            if (
                isset($emp_email_contact) && $emp_email_contact != "" &&
                isset($emp_name) && $emp_name != "" &&
                isset($emp_address) && $emp_address != "" &&
                isset($emp_phone) && $emp_phone != "" &&
                isset($emp_birth) && $emp_birth != ""
            ) {
                $use_id = $user->use_id;
                $select = User::where('use_id', $use_id)->first();
                // C·∫≠p nh·∫≠t ·∫£nh ƒë·∫°i di·ªán
                $use_logo = '';
                if (!empty($avatar)) {
                    $originalName = $avatar->getClientOriginalName(); // "doodles-5654738.png"
                    $extension = $avatar->getClientOriginalExtension(); // "png"
                    $mimeType = $avatar->getClientMimeType(); // "image/png"
                    $size = $avatar->getSize(); // Dung l∆∞·ª£ng file (bytes)
                    $tempPath = $avatar->getPathname(); // "C:\xampp\tmp\php2F3F.tmp"
                    $use_logo = UploadAvatar($tempPath, $select['use_name'], $select['use_create_time'], $extension);
                }
                // C·∫≠p nh·∫≠t th√¥ng tin t√†i kho·∫£n
                User::where('use_id', $use_id)->update([
                    'use_name' => $emp_name,
                    'use_email_contact' => $emp_email_contact,
                    'use_phone' => $emp_phone,
                    'birthday' => $emp_birth,
                    'address' => $emp_address,
                    'use_update_time' => time(),
                    'use_logo' => $use_logo,
                    'last_login' => time(),
                    'use_ip_address' => $ip_address,
                ]);

                return response()->json([
                    'result' => true,
                    'data' => $user,
                    'message' => "C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng",
                ], 200);
            }

            return response()->json($data_mess, 400);

        } catch (JWTException $e) {
            return response()->json(['message' => 'L·ªói x√°c th·ª±c token!'], 401);
        }
    }
}
