<?php
// namespace
namespace App\Http\Controllers;
// Import Request
use Illuminate\Http\Request;
// import CartRepositoryInterface
use App\Repositories\Cart\CartRepositoryInterface;

class CartController extends Controller
{
    protected $cartRepository;

    public function __construct(CartRepositoryInterface $cartRepository)
    {
        $this->cartRepository = $cartRepository;
    }
    public function index()
    {
        /** === Khai b√°o th∆∞ vi·ªán s·ª≠ d·ª•ng === */
        $dataversion = [
            'useslick' => 0,
            'useselect2' => 1,
        ];
        /** === 1. L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ cookie & gi·∫£i m√£ === */
        $UID_ENCRYPT = $_COOKIE['UID'] ?? 0;
        $UT_ENCRYPT = $_COOKIE['UT'] ?? 0;
        $key = base64_decode(getenv('KEY_ENCRYPT'));
        $user_id = decryptData($UID_ENCRYPT, $key);
        $userType = decryptData($UT_ENCRYPT, $key);

        /** === 2. L·∫•y d·ªØ li·ªáu gi·ªè h√†ng t·ª´ repository === */
        $response = $this->cartRepository->getCartByUser($user_id);
        $datacart = [];
        if ($response['success']) {
            $datacart = $response['data']->toArray();
        }

        /** === X√¢y d·ª±ng SEO === */
        $domain = env('DOMAIN_WEB');
        $dataSeo = [
            'seo_title' => "Gi·ªè H√†ng C·ªßa B·∫°n - Fashion Houses",
            'seo_desc' => "Xem l·∫°i c√°c s·∫£n ph·∫©m th·ªùi trang trong gi·ªè h√†ng c·ªßa b·∫°n t·∫°i Fashion Houses. Ho√†n t·∫•t ƒë∆°n h√†ng ƒë·ªÉ s·ªü h·ªØu nh·ªØng thi·∫øt k·∫ø m·ªõi nh·∫•t t·ª´ c√°c nh√† m·ªët h√†ng ƒë·∫ßu!",
            'seo_keyword' => "Fashion Houses gi·ªè h√†ng, s·∫£n ph·∫©m th·ªùi trang, mua s·∫Øm th·ªùi trang, thanh to√°n ƒë∆°n h√†ng, th·ªùi trang cao c·∫•p, gi·ªè h√†ng tr·ª±c tuy·∫øn, xu h∆∞·ªõng th·ªùi trang, ƒë·∫∑t h√†ng th·ªùi trang.",
            'canonical' => $domain . '/gio-hang',
        ];
        /** === X√¢y d·ª±ng breadcrumb === */
        $breadcrumbItems = [
            ['title' => 'Trang ch·ªß', 'url' => '/', 'class' => 'otherssite'],
            [
                'title' => "Gi·ªè h√†ng",
                'url' => '',
                'class' => 'thissite'
            ]
        ];
        /** === Chu·∫©n b·ªã d·ªØ li·ªáu giao di·ªán (UI) === */
        $dataversion = [
            'useslick' => 0,
            'useselect2' => 1,
        ];
        $data = InForAccount();
        $categoryTree = getCategoryTree();
        $dataAll = [
            'data' => $data,
            'breadcrumbItems' => $breadcrumbItems,
            'Category' => $categoryTree,
            'datacart' => $datacart,
        ];

        /** === Tr·∫£ v·ªÅ view v·ªõi d·ªØ li·ªáu === */
        return view('cart', [
            'dataSeo' => $dataSeo,
            'domain' => $domain,
            'dataversion' => $dataversion,
            'dataAll' => $dataAll,
        ]);
    }

    public function AddToCart(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            // ================================================
            $product_amount = $request->get('product_amount');
            $product_code = $request->get('product_code');
            $product_size = $request->get('product_size');
            $product_color = $request->get('product_color');
            if (!$product_code || !$product_amount) {
                return apiResponse("error", "Thi·∫øu m√£ s·∫£n ph·∫©m ho·∫∑c s·ªë l∆∞·ª£ng", [], false, 400);
            }
            $product_classification = trim($product_size . ',' . $product_color);
            /** === L·∫•y d·ªØ li·ªáu t·ª´ repository === */
            $response = $this->cartRepository->addToCart($user_id, $product_code, $product_amount, $product_classification);
            if ($response['success']) {
                return apiResponse('success', $response['message'], $response['data'], true, $response['httpCode']);
            } else {
                return apiResponse('error', $response['message'], $response['data'], false, $response['httpCode']);
            }
        } catch (\Exception $e) {
            \Log::error("C√≥ l·ªói x·∫£y ra khi th√™m gi·ªè h√†ng - " . $e->getMessage());
            return apiResponse("error", "L·ªói server: " . $e->getMessage(), [], false, 500);
        }
    }

    public function updateCartCountBuy(Request $request)
    {
        try {
            // üü¢ ======= L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ request =======
            $user = $request->user;
            if (!$user) {
                return response()->json(['message' => 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!'], 401);
            }
            $user_id = $user->use_id;
            $userType = $user->use_role;
            // Nh·∫≠n d·ªØ li·ªáu t·ª´ request
            $cart_product_amount = (int) $request->get('cart_product_amount');
            $cart_id = (int) $request->get('cart_id');

            // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o (tr√°nh l·ªói null ho·∫∑c gi√° tr·ªã kh√¥ng h·ª£p l·ªá)
            if (!$cart_product_amount || !$cart_id) {
                return apiResponse("error", "Thi·∫øu ID gi·ªè h√†ng ho·∫∑c s·ªë l∆∞·ª£ng", [], false, 400);
            }

            /** === L·∫•y d·ªØ li·ªáu t·ª´ repository === */
            $response = $this->cartRepository->updateCartAmount($user_id, $cart_id, $cart_product_amount);
            if ($response['success']) {
                return apiResponse('success', $response['message'], $response['data'], true, $response['httpCode']);
            } else {
                return apiResponse('error', $response['message'], $response['data'], false, $response['httpCode']);
            }
        } catch (\Exception $e) {
            \Log::error("L·ªói khi c·∫≠p nh·∫≠t gi·ªè h√†ng: " . $e->getMessage(), [
                'request' => $request->all(),
                'user_id' => $user_id ?? null
            ]);
            return apiResponse("error", "L·ªói server, vui l√≤ng th·ª≠ l·∫°i sau.", [], false, 500);
        }
    }
}
